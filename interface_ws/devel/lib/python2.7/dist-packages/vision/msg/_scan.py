# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vision/scan.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class scan(genpy.Message):
  _md5sum = "b9e8a289688146cc63d6908befcb947b"
  _type = "vision/scan"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int64 Angle_Near_Gap
int64 Magn_Near_Gap
int64 Magn_Near_Start
int64 Magn_Middle_Start
int64 Magn_Far_Start
int64 Magn_Far_End
int64 Dont_Search_Angle_1
int64 Dont_Search_Angle_2
int64 Dont_Search_Angle_3
int64 Angle_range_1
int64 Angle_range_2_3
"""
  __slots__ = ['Angle_Near_Gap','Magn_Near_Gap','Magn_Near_Start','Magn_Middle_Start','Magn_Far_Start','Magn_Far_End','Dont_Search_Angle_1','Dont_Search_Angle_2','Dont_Search_Angle_3','Angle_range_1','Angle_range_2_3']
  _slot_types = ['int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Angle_Near_Gap,Magn_Near_Gap,Magn_Near_Start,Magn_Middle_Start,Magn_Far_Start,Magn_Far_End,Dont_Search_Angle_1,Dont_Search_Angle_2,Dont_Search_Angle_3,Angle_range_1,Angle_range_2_3

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(scan, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Angle_Near_Gap is None:
        self.Angle_Near_Gap = 0
      if self.Magn_Near_Gap is None:
        self.Magn_Near_Gap = 0
      if self.Magn_Near_Start is None:
        self.Magn_Near_Start = 0
      if self.Magn_Middle_Start is None:
        self.Magn_Middle_Start = 0
      if self.Magn_Far_Start is None:
        self.Magn_Far_Start = 0
      if self.Magn_Far_End is None:
        self.Magn_Far_End = 0
      if self.Dont_Search_Angle_1 is None:
        self.Dont_Search_Angle_1 = 0
      if self.Dont_Search_Angle_2 is None:
        self.Dont_Search_Angle_2 = 0
      if self.Dont_Search_Angle_3 is None:
        self.Dont_Search_Angle_3 = 0
      if self.Angle_range_1 is None:
        self.Angle_range_1 = 0
      if self.Angle_range_2_3 is None:
        self.Angle_range_2_3 = 0
    else:
      self.Angle_Near_Gap = 0
      self.Magn_Near_Gap = 0
      self.Magn_Near_Start = 0
      self.Magn_Middle_Start = 0
      self.Magn_Far_Start = 0
      self.Magn_Far_End = 0
      self.Dont_Search_Angle_1 = 0
      self.Dont_Search_Angle_2 = 0
      self.Dont_Search_Angle_3 = 0
      self.Angle_range_1 = 0
      self.Angle_range_2_3 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_11q.pack(_x.Angle_Near_Gap, _x.Magn_Near_Gap, _x.Magn_Near_Start, _x.Magn_Middle_Start, _x.Magn_Far_Start, _x.Magn_Far_End, _x.Dont_Search_Angle_1, _x.Dont_Search_Angle_2, _x.Dont_Search_Angle_3, _x.Angle_range_1, _x.Angle_range_2_3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 88
      (_x.Angle_Near_Gap, _x.Magn_Near_Gap, _x.Magn_Near_Start, _x.Magn_Middle_Start, _x.Magn_Far_Start, _x.Magn_Far_End, _x.Dont_Search_Angle_1, _x.Dont_Search_Angle_2, _x.Dont_Search_Angle_3, _x.Angle_range_1, _x.Angle_range_2_3,) = _struct_11q.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_11q.pack(_x.Angle_Near_Gap, _x.Magn_Near_Gap, _x.Magn_Near_Start, _x.Magn_Middle_Start, _x.Magn_Far_Start, _x.Magn_Far_End, _x.Dont_Search_Angle_1, _x.Dont_Search_Angle_2, _x.Dont_Search_Angle_3, _x.Angle_range_1, _x.Angle_range_2_3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 88
      (_x.Angle_Near_Gap, _x.Magn_Near_Gap, _x.Magn_Near_Start, _x.Magn_Middle_Start, _x.Magn_Far_Start, _x.Magn_Far_End, _x.Dont_Search_Angle_1, _x.Dont_Search_Angle_2, _x.Dont_Search_Angle_3, _x.Angle_range_1, _x.Angle_range_2_3,) = _struct_11q.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_11q = struct.Struct("<11q")
