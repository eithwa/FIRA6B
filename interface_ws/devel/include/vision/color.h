// Generated by gencpp from file vision/color.msg
// DO NOT EDIT!


#ifndef VISION_MESSAGE_COLOR_H
#define VISION_MESSAGE_COLOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vision
{
template <class ContainerAllocator>
struct color_
{
  typedef color_<ContainerAllocator> Type;

  color_()
    : ColorMode(0)
    , BallHSVBox()
    , GreenHSVBox()
    , BlueHSVBox()
    , YellowHSVBox()
    , WhiteHSVBox()  {
    }
  color_(const ContainerAllocator& _alloc)
    : ColorMode(0)
    , BallHSVBox(_alloc)
    , GreenHSVBox(_alloc)
    , BlueHSVBox(_alloc)
    , YellowHSVBox(_alloc)
    , WhiteHSVBox(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _ColorMode_type;
  _ColorMode_type ColorMode;

   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _BallHSVBox_type;
  _BallHSVBox_type BallHSVBox;

   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _GreenHSVBox_type;
  _GreenHSVBox_type GreenHSVBox;

   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _BlueHSVBox_type;
  _BlueHSVBox_type BlueHSVBox;

   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _YellowHSVBox_type;
  _YellowHSVBox_type YellowHSVBox;

   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _WhiteHSVBox_type;
  _WhiteHSVBox_type WhiteHSVBox;




  typedef boost::shared_ptr< ::vision::color_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision::color_<ContainerAllocator> const> ConstPtr;

}; // struct color_

typedef ::vision::color_<std::allocator<void> > color;

typedef boost::shared_ptr< ::vision::color > colorPtr;
typedef boost::shared_ptr< ::vision::color const> colorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision::color_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision::color_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vision

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'vision': ['/home/leokim/interface_ws/src/interface_ws/vision/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vision::color_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision::color_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision::color_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision::color_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision::color_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision::color_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision::color_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3ff80881ed080689369689eeb69893cd";
  }

  static const char* value(const ::vision::color_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3ff80881ed080689ULL;
  static const uint64_t static_value2 = 0x369689eeb69893cdULL;
};

template<class ContainerAllocator>
struct DataType< ::vision::color_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision/color";
  }

  static const char* value(const ::vision::color_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision::color_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 ColorMode\n\
int64[] BallHSVBox\n\
int64[] GreenHSVBox\n\
int64[] BlueHSVBox\n\
int64[] YellowHSVBox\n\
int64[] WhiteHSVBox\n\
";
  }

  static const char* value(const ::vision::color_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision::color_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ColorMode);
      stream.next(m.BallHSVBox);
      stream.next(m.GreenHSVBox);
      stream.next(m.BlueHSVBox);
      stream.next(m.YellowHSVBox);
      stream.next(m.WhiteHSVBox);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct color_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision::color_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision::color_<ContainerAllocator>& v)
  {
    s << indent << "ColorMode: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ColorMode);
    s << indent << "BallHSVBox[]" << std::endl;
    for (size_t i = 0; i < v.BallHSVBox.size(); ++i)
    {
      s << indent << "  BallHSVBox[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.BallHSVBox[i]);
    }
    s << indent << "GreenHSVBox[]" << std::endl;
    for (size_t i = 0; i < v.GreenHSVBox.size(); ++i)
    {
      s << indent << "  GreenHSVBox[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.GreenHSVBox[i]);
    }
    s << indent << "BlueHSVBox[]" << std::endl;
    for (size_t i = 0; i < v.BlueHSVBox.size(); ++i)
    {
      s << indent << "  BlueHSVBox[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.BlueHSVBox[i]);
    }
    s << indent << "YellowHSVBox[]" << std::endl;
    for (size_t i = 0; i < v.YellowHSVBox.size(); ++i)
    {
      s << indent << "  YellowHSVBox[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.YellowHSVBox[i]);
    }
    s << indent << "WhiteHSVBox[]" << std::endl;
    for (size_t i = 0; i < v.WhiteHSVBox.size(); ++i)
    {
      s << indent << "  WhiteHSVBox[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.WhiteHSVBox[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_MESSAGE_COLOR_H
