// Generated by gencpp from file vision/center.msg
// DO NOT EDIT!


#ifndef VISION_MESSAGE_CENTER_H
#define VISION_MESSAGE_CENTER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vision
{
template <class ContainerAllocator>
struct center_
{
  typedef center_<ContainerAllocator> Type;

  center_()
    : CenterX(0)
    , CenterY(0)
    , Inner(0)
    , Outer(0)
    , Front(0)
    , Camera_High(0)  {
    }
  center_(const ContainerAllocator& _alloc)
    : CenterX(0)
    , CenterY(0)
    , Inner(0)
    , Outer(0)
    , Front(0)
    , Camera_High(0)  {
  (void)_alloc;
    }



   typedef int64_t _CenterX_type;
  _CenterX_type CenterX;

   typedef int64_t _CenterY_type;
  _CenterY_type CenterY;

   typedef int64_t _Inner_type;
  _Inner_type Inner;

   typedef int64_t _Outer_type;
  _Outer_type Outer;

   typedef int64_t _Front_type;
  _Front_type Front;

   typedef int64_t _Camera_High_type;
  _Camera_High_type Camera_High;




  typedef boost::shared_ptr< ::vision::center_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision::center_<ContainerAllocator> const> ConstPtr;

}; // struct center_

typedef ::vision::center_<std::allocator<void> > center;

typedef boost::shared_ptr< ::vision::center > centerPtr;
typedef boost::shared_ptr< ::vision::center const> centerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision::center_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision::center_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vision

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'vision': ['/home/leokim/interface_ws/src/interface_ws/vision/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vision::center_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision::center_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision::center_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision::center_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision::center_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision::center_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision::center_<ContainerAllocator> >
{
  static const char* value()
  {
    return "072f613cc7a98f1701799d9959c2aeb3";
  }

  static const char* value(const ::vision::center_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x072f613cc7a98f17ULL;
  static const uint64_t static_value2 = 0x01799d9959c2aeb3ULL;
};

template<class ContainerAllocator>
struct DataType< ::vision::center_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision/center";
  }

  static const char* value(const ::vision::center_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision::center_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 CenterX\n\
int64 CenterY\n\
int64 Inner\n\
int64 Outer\n\
int64 Front\n\
int64 Camera_High\n\
";
  }

  static const char* value(const ::vision::center_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision::center_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.CenterX);
      stream.next(m.CenterY);
      stream.next(m.Inner);
      stream.next(m.Outer);
      stream.next(m.Front);
      stream.next(m.Camera_High);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct center_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision::center_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision::center_<ContainerAllocator>& v)
  {
    s << indent << "CenterX: ";
    Printer<int64_t>::stream(s, indent + "  ", v.CenterX);
    s << indent << "CenterY: ";
    Printer<int64_t>::stream(s, indent + "  ", v.CenterY);
    s << indent << "Inner: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Inner);
    s << indent << "Outer: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Outer);
    s << indent << "Front: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Front);
    s << indent << "Camera_High: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Camera_High);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_MESSAGE_CENTER_H
