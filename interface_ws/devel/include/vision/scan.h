// Generated by gencpp from file vision/scan.msg
// DO NOT EDIT!


#ifndef VISION_MESSAGE_SCAN_H
#define VISION_MESSAGE_SCAN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vision
{
template <class ContainerAllocator>
struct scan_
{
  typedef scan_<ContainerAllocator> Type;

  scan_()
    : Angle_Near_Gap(0)
    , Magn_Near_Gap(0)
    , Magn_Near_Start(0)
    , Magn_Middle_Start(0)
    , Magn_Far_Start(0)
    , Magn_Far_End(0)
    , Dont_Search_Angle_1(0)
    , Dont_Search_Angle_2(0)
    , Dont_Search_Angle_3(0)
    , Angle_range_1(0)
    , Angle_range_2_3(0)  {
    }
  scan_(const ContainerAllocator& _alloc)
    : Angle_Near_Gap(0)
    , Magn_Near_Gap(0)
    , Magn_Near_Start(0)
    , Magn_Middle_Start(0)
    , Magn_Far_Start(0)
    , Magn_Far_End(0)
    , Dont_Search_Angle_1(0)
    , Dont_Search_Angle_2(0)
    , Dont_Search_Angle_3(0)
    , Angle_range_1(0)
    , Angle_range_2_3(0)  {
  (void)_alloc;
    }



   typedef int64_t _Angle_Near_Gap_type;
  _Angle_Near_Gap_type Angle_Near_Gap;

   typedef int64_t _Magn_Near_Gap_type;
  _Magn_Near_Gap_type Magn_Near_Gap;

   typedef int64_t _Magn_Near_Start_type;
  _Magn_Near_Start_type Magn_Near_Start;

   typedef int64_t _Magn_Middle_Start_type;
  _Magn_Middle_Start_type Magn_Middle_Start;

   typedef int64_t _Magn_Far_Start_type;
  _Magn_Far_Start_type Magn_Far_Start;

   typedef int64_t _Magn_Far_End_type;
  _Magn_Far_End_type Magn_Far_End;

   typedef int64_t _Dont_Search_Angle_1_type;
  _Dont_Search_Angle_1_type Dont_Search_Angle_1;

   typedef int64_t _Dont_Search_Angle_2_type;
  _Dont_Search_Angle_2_type Dont_Search_Angle_2;

   typedef int64_t _Dont_Search_Angle_3_type;
  _Dont_Search_Angle_3_type Dont_Search_Angle_3;

   typedef int64_t _Angle_range_1_type;
  _Angle_range_1_type Angle_range_1;

   typedef int64_t _Angle_range_2_3_type;
  _Angle_range_2_3_type Angle_range_2_3;




  typedef boost::shared_ptr< ::vision::scan_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision::scan_<ContainerAllocator> const> ConstPtr;

}; // struct scan_

typedef ::vision::scan_<std::allocator<void> > scan;

typedef boost::shared_ptr< ::vision::scan > scanPtr;
typedef boost::shared_ptr< ::vision::scan const> scanConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision::scan_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision::scan_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vision

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'vision': ['/home/leokim/interface_ws/src/interface_ws/vision/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vision::scan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision::scan_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision::scan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision::scan_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision::scan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision::scan_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision::scan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b9e8a289688146cc63d6908befcb947b";
  }

  static const char* value(const ::vision::scan_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb9e8a289688146ccULL;
  static const uint64_t static_value2 = 0x63d6908befcb947bULL;
};

template<class ContainerAllocator>
struct DataType< ::vision::scan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision/scan";
  }

  static const char* value(const ::vision::scan_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision::scan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 Angle_Near_Gap\n\
int64 Magn_Near_Gap\n\
int64 Magn_Near_Start\n\
int64 Magn_Middle_Start\n\
int64 Magn_Far_Start\n\
int64 Magn_Far_End\n\
int64 Dont_Search_Angle_1\n\
int64 Dont_Search_Angle_2\n\
int64 Dont_Search_Angle_3\n\
int64 Angle_range_1\n\
int64 Angle_range_2_3\n\
";
  }

  static const char* value(const ::vision::scan_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision::scan_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Angle_Near_Gap);
      stream.next(m.Magn_Near_Gap);
      stream.next(m.Magn_Near_Start);
      stream.next(m.Magn_Middle_Start);
      stream.next(m.Magn_Far_Start);
      stream.next(m.Magn_Far_End);
      stream.next(m.Dont_Search_Angle_1);
      stream.next(m.Dont_Search_Angle_2);
      stream.next(m.Dont_Search_Angle_3);
      stream.next(m.Angle_range_1);
      stream.next(m.Angle_range_2_3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct scan_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision::scan_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision::scan_<ContainerAllocator>& v)
  {
    s << indent << "Angle_Near_Gap: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Angle_Near_Gap);
    s << indent << "Magn_Near_Gap: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Magn_Near_Gap);
    s << indent << "Magn_Near_Start: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Magn_Near_Start);
    s << indent << "Magn_Middle_Start: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Magn_Middle_Start);
    s << indent << "Magn_Far_Start: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Magn_Far_Start);
    s << indent << "Magn_Far_End: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Magn_Far_End);
    s << indent << "Dont_Search_Angle_1: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Dont_Search_Angle_1);
    s << indent << "Dont_Search_Angle_2: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Dont_Search_Angle_2);
    s << indent << "Dont_Search_Angle_3: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Dont_Search_Angle_3);
    s << indent << "Angle_range_1: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Angle_range_1);
    s << indent << "Angle_range_2_3: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Angle_range_2_3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_MESSAGE_SCAN_H
